AWSTemplateFormatVersion: 2010-09-09
Description: >-
  CloudFormation template to integrate AWS resources including Lambda, SQS, SNS and S3
  with Solace broker
Parameters:
  Title:
    Type: String
  ResourceType:
    Type: String
  IntegrationType:
    Type: String
  ResourceARN:
    Type: String
  RoleARN:
    Type: String
  VpcId:
    Default: ''
    Type: String
  OctetStreamTemplate:
    Default: ''
    Type: String
  JSONTemplate:
    Default: ''
    Type: String
  DeleteTemplate:
    Default: ''
    Type: String
  LambdaAuthorizerARN:
    Default: ''
    Type: String
  AuthHTTPHeaderName:
    Default: ''
    Type: String
  S3ResourceNonDefaultRegion:
    Default: ''
    Type: String
Mappings: {}
Conditions:
  PrivateIntegrationCondition: !Equals [!Ref IntegrationType, Private]
  PublicIntegrationCondition: !Not [!Equals [!Ref IntegrationType, Private]]
  S3ServiceCondition: !Equals [!Ref ResourceType, S3]
  SQSServiceCondition: !Equals [!Ref ResourceType, SQS]
  S3ResourceNonDefaultRegionCondition: !Not [!Equals [!Ref S3ResourceNonDefaultRegion, '']]
Resources:
  ApiProxyGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - gateway
      Description: Proxy for created resource
      FailOnWarnings: true
      EndpointConfiguration:
        Types: # Depends on IntegrationType
          - !If [ PrivateIntegrationCondition, 'PRIVATE', 'REGIONAL']
      Body:
        swagger: '2.0'
        info:
          version: '2017-04-29T15:22:50Z'
          title: !Ref Title
        schemes:
          - https
        paths:
          /send: # Send is different depending on S3 or others
            !If
              - S3ServiceCondition
              - # For S3 type of integration
                post:
                  produces:
                    - application/json
                  responses:
                    '200':
                      description: 200 response
                      schema:
                        $ref: '#/definitions/Empty'
                      headers:
                        Content-Length:
                          type: string
                        Content-Type:
                          type: string
                    '400':
                      description: 400 response
                    '500':
                      description: 500 response
                  security: # Only required for public integration
                    !If
                      - PublicIntegrationCondition
                      - # For public integration
                        - sample-custom-authorizer: []
                      - # For private integration
                        !Ref 'AWS::NoValue'
                  x-amazon-apigateway-integration:
                    credentials: !Ref RoleARN
                    uri: !Join 
                      - ':'
                      - - 'arn:aws:apigateway'
                        - !If [ S3ResourceNonDefaultRegionCondition, !Ref S3ResourceNonDefaultRegion, !Ref 'AWS::Region']
                        - 's3:path/{bucket}/{object}'
                    responses:
                      '4\d{2}':
                        statusCode: '400'
                      default:
                        statusCode: '200'
                        responseParameters:
                          method.response.header.Content-Type: integration.response.header.Content-Type
                          method.response.header.Content-Length: integration.response.header.Content-Length
                      '5\d{2}':
                        statusCode: '500'
                    requestParameters:
                      integration.request.path.bucket: !Join 
                        - ''
                        - - ''''
                          - !Select [5, !Split [':', !Ref ResourceARN]]
                          - ''''
                      integration.request.path.object: context.requestId
                    passthroughBehavior: when_no_match
                    httpMethod: PUT
                    type: aws
              - # For SNS, SQS and Lambda type of integration
                post:
                  consumes:
                    - application/json
                    - application/octet-stream
                  produces:
                    - application/json
                  responses:
                    '200':
                      description: 200 response
                      schema:
                        $ref: '#/definitions/Empty'
                    '400':
                      description: 400 response
                    '500':
                      description: 500 response
                  security: # Only required for public integration
                    !If
                      - PublicIntegrationCondition
                      - # For public integration
                        - sample-custom-authorizer: []
                      - # For private integration
                        !Ref 'AWS::NoValue'
                  x-amazon-apigateway-integration:
                    credentials: !Ref RoleARN
                    uri: !Ref ResourceARN
                    responses:
                      default:
                        statusCode: '200'
                      '4\d{2}':
                        statusCode: '400'
                      '5\d{2}':
                        statusCode: '500'
                    requestParameters:
                      integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
                    requestTemplates:
                      application/octet-stream: !Ref OctetStreamTemplate
                      application/json: !Ref JSONTemplate
                    passthroughBehavior: never
                    httpMethod: POST
                    type: aws
          /receive:
            !If
              - SQSServiceCondition
              - # For SQS type of integration
                post:
                  produces:
                    - application/json
                  parameters:
                    - name: MaxNumberOfMessages
                      in: query
                      required: true
                      type: string
                    - name: AttributeName
                      in: query
                      required: true
                      type: string
                    - name: VisibilityTimeout
                      in: query
                      required: true
                      type: string
                  responses:
                    '200':
                      description: 200 response
                      schema:
                        $ref: '#/definitions/Empty'
                      headers:
                        Access-Control-Allow-Origin:
                          type: string
                    '400':
                      description: 400 response
                    '500':
                      description: 500 response
                  security: # Only required for public integration
                    !If
                      - PublicIntegrationCondition
                      - # For public integration
                        - sample-custom-authorizer: []
                      - # For private integration
                        !Ref 'AWS::NoValue'
                  x-amazon-apigateway-integration:
                    credentials: !Ref RoleARN
                    uri: !Ref ResourceARN
                    responses:
                      default:
                        statusCode: '200'
                      '4\d{2}':
                        statusCode: '400'
                      '5\d{2}':
                        statusCode: '500'
                    requestParameters:
                      integration.request.querystring.Version: '''2012-11-05'''
                      integration.request.querystring.MaxNumberOfMessages: method.request.querystring.MaxNumberOfMessages
                      integration.request.querystring.VisibilityTimeout: method.request.querystring.VisibilityTimeout
                      integration.request.querystring.Action: '''ReceiveMessage'''
                      integration.request.querystring.AttributeName: method.request.querystring.AttributeName
                      integration.request.header.Content-Type: '''application/json'''
                    passthroughBehavior: when_no_match
                    httpMethod: GET
                    type: aws
              - # No receive for SNS, S3 and Lambda
                !Ref 'AWS::NoValue'
          /delete:
            !If
              - SQSServiceCondition
              - # For SQS type of integration
                post:
                  consumes:
                    - application/octet-stream
                  produces:
                    - application/json
                  responses:
                    '200':
                      description: 200 response
                      schema:
                        $ref: '#/definitions/Empty'
                    '400':
                      description: 400 response
                    '500':
                      description: 500 response
                  security: # Only required for public integration
                    !If
                      - PublicIntegrationCondition
                      - # For public integration
                        - sample-custom-authorizer: []
                      - # For private integration
                        !Ref 'AWS::NoValue'
                  x-amazon-apigateway-integration:
                    credentials: !Ref RoleARN
                    uri: !Ref ResourceARN
                    responses:
                      default:
                        statusCode: '200'
                      '4\d{2}':
                        statusCode: '400'
                      '5\d{2}':
                        statusCode: '500'
                    requestParameters:
                      integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
                    requestTemplates:
                      application/octet-stream: !Ref DeleteTemplate
                    passthroughBehavior: never
                    httpMethod: POST
                    type: aws
              - # No delete for SNS, S3 and Lambda
                !Ref 'AWS::NoValue'
        definitions:
          Empty:
            type: object
            title: Empty Schema
        securityDefinitions: # Only required for public integration
          !If
            - PublicIntegrationCondition
            - # For public integration
              sample-custom-authorizer:
                    type: 'apiKey'
                    name: !Ref AuthHTTPHeaderName
                    in: 'header'
                    x-amazon-apigateway-authtype: 'custom'
                    x-amazon-apigateway-authorizer:
                      authorizerUri:  !Join 
                        - ''
                        - - 'arn:aws:apigateway:'
                          - !Ref 'AWS::Region'
                          - ':lambda:path/2015-03-31/functions/'
                          - !Ref LambdaAuthorizerARN
                          - /invocations
                      authorizerResultTtlInSeconds: 30
                      type: 'token'
            - # Empty for private integration
              !Ref 'AWS::NoValue'
        x-amazon-apigateway-policy: # Only required for private integration
          !If
            - PrivateIntegrationCondition
            - # For private integration
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Principal: '*'
                  Action: 'execute-api:Invoke'
                  Resource: !Join 
                    - ':'
                    - - 'arn:aws:execute-api'
                      - !Ref 'AWS::Region'
                      - !Select 
                        - '4'
                        - !Split 
                          - ':'
                          - !Ref RoleARN
                      - '*/*'
                  Condition:
                    StringEquals:
                      'aws:sourceVpc': !Ref VpcId
            - # Empty for public integration
              !Ref 'AWS::NoValue'
  LambdaAuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: PublicIntegrationCondition
    Properties:
      FunctionName: !Ref LambdaAuthorizerARN
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ['', ['arn:aws:execute-api:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref ApiProxyGateway, '/authorizers/', '*']]
  ApiProxyGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    # DependsOn: Method
    Properties:
      Description: Deploy the service proxy
      RestApiId: !Ref ApiProxyGateway
      StageDescription:
        CacheClusterEnabled: false
      StageName: DEVELOPMENT
Outputs:
  APIGatewayId:
    Value: !Ref ApiProxyGateway
    Description: API Gateway ID
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewayId'
  ProxyAPISendUrl:
    Value: !Sub https://${ApiProxyGateway}.execute-api.${AWS::Region}.amazonaws.com/DEVELOPMENT/send
    Description: API Gateway URL for /send resource
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewaySendUrl'
  ProxyAPIReceiveUrl:
    Value:
      !If
        - SQSServiceCondition
        - !Sub https://${ApiProxyGateway}.execute-api.${AWS::Region}.amazonaws.com/DEVELOPMENT/receive
        - '-'
    Description: API Gateway URL for /receive resource
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewayReceiveUrl'
  ProxyAPIDeleteUrl:
    Value:
      !If
        - SQSServiceCondition
        - !Sub https://${ApiProxyGateway}.execute-api.${AWS::Region}.amazonaws.com/DEVELOPMENT/delete
        - '-'
    Description: API Gateway URL for /delete resource
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewayDeleteUrl'
